#!/usr/bin/perl

use strict;
use warnings;

use Time::HiRes qw(usleep);

my $usage = "burn-eeprom DEVICE HEXFILE\ne.g. \$ burn-eeprom /dev/ttyACM0 ucode-low.hex\n";
my $dev = shift or die "usage: $usage";
my $hexfile = shift or die "usage: $usage";

# configure serial port
# no idea what the hex numbers mean, I got them from "stty -g" after getting the port into a workable state using Arduino serial monitor
system("stty -F \Q$dev\E 0:0:18b2:0:3:1c:7f:15:4:0:0:0:11:13:1a:0:12:f:17:16:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0");
open(my $fh, '+<', $dev)
    or die "can't open $dev: $!\n";

# load hex file
my @data;
open(my $hexfh, '<', $hexfile)
    or die "can't read $hexfile: $!\n";
while (<$hexfh>) {
    chomp;
    die "line $.: value out of range: $_\n" if hex($_) > 255;
    push @data, hex($_);
}
close $hexfh;

print STDERR "Please close the jumper and hit ENTER...\n";
<>;
burn_eeprom(0);

if (@data > 1024) {
    print STDERR "Please open the jumper and hit ENTER...\n";
    <>;
    burn_eeprom(1024);
}

sub burn_eeprom {
    my ($base) = @_;
    for my $addr (0 .. 1023) {
        my $val = $data[$addr+$base];
        last if !defined $val;
        print $fh "write $addr $val\n";
        usleep(12000);
        my $l = <$fh>;
        $l =~ s/[\0\r\n]//g;
        die "read $addr: ($l)\n" if $l ne 'ok';
        my $pct = $addr / 1023;
        print STDERR sprintf("   \r%d%%", 100*$pct);
    }
    print STDERR "\n";
}
