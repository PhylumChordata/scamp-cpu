#!/usr/bin/perl

# Assembler

use strict;
use warnings;

use JSON qw(decode_json);
use FindBin;

my $instructions = load_instructions();

my %macro = (
    'sp' => 'r255',
);

my %label = ();
my $pc = 0;
my $start = 0;
my @code;

# add macros for ".def r0 (0xff00)" for 0..255
# TODO: maybe add a flag to turn off the the default macros?
$macro{"r$_"} = sprintf("(0xff%02x)", $_) for (0..255);

while (my $line = <>) {
    chomp $line;

    # strip comments, whitespace
    $line =~ s/#.*//;
    $line =~ s/^\s+//;
    $line =~ s/\s+$//;

    # apply macro substitutions
    my $was;
    do {
        $was = $line;
        $line =~ s/\b$_\b/$macro{$_}/g for keys %macro;
    } until ($line eq $was); # apply macros until no change

    # resolve hex
    $line =~ s/\b0x([0-9a-f]+)\b/hex($1)/gei;
    # resolve binary
    $line =~ s/\b(0b[01]+)\b/oct($1)/gei;

    # store labels
    while ($line =~ s/^([a-z_][a-z_0-9]*):\s*//i) {
        my $name = namearg($1);
        die "error: line $.: duplicate label name: $name\n" if exists $label{$name};
        $label{$name} = $pc;
    }

    next if $line eq '';

    my ($op, $args_str) = split /\s+/, $line, 2;
    my @args = split /\s*,\s*/, $args_str||'';

    if ($op eq '.def') {
        @args = split /\s+/, $args_str;
        params($op, 2, @args);
        my $name = namearg($args[0]);
        die "error: line $.: duplicate macro name: $name\n" if exists $macro{$name};
        $line =~ s/\s*$op\s*$name\s*//;
        $macro{$name} = $line;
    } elsif ($op eq '.at') {
        params($op, 1, @args);
        if ($pc == 0) {
            $start = numarg($args[0]);
        } else {
            emit(0x0000) for ($pc+1 .. numarg($args[0]));
        }
        $pc = numarg($args[0]);
    } elsif ($op eq '.gap') {
        params($op, 1, @args);
        emit(0x0000) for (1 .. numarg($args[0]));
    } elsif ($op eq '.word') {
        params($op, 1, @args);
        emit(numarg($args[0]));
    } elsif ($op eq '.str') {
        die "error: line $.: .str not implemented\n";
    } elsif ($op eq '.pstr') {
        die "error: line $.: .pstr not implemented\n";
    } else {
        # turn the arguments into a pattern
        my @argpattern;
        for my $a (@args) {
            push @argpattern, arg2pattern($a);
        }
        my $re = "\Q$op\E";
        $re .= ' ' . join(', ', @argpattern) if @argpattern;

        # find instructions that match the pattern
        my @match;
        for my $i (keys %$instructions) {
            push @match, $i if $i =~ /^$re$/;
        }
        die "error: line $.: unrecognised operation: $line\n" if !@match;

        # pick an i8 operand in preference to an i16
        if (@match > 1) {
            my @new = grep { /i8/ } @match;
            @match = @new if @new;
        }
        # TODO: should we just pick the fastest instruction instead of dying?
        die "error: line $.: multiple instructions match (probably an assembler bug): " . join(',', map { "[$_]" } @match) . "\n" if @match > 1;

        # generate code:
        #  - upper 8 bits of instruction come from opcode
        #  - lower 8 bits of instruction are i8l/i8h, if any,
        #    otherwise ignored (so 0)
        #  - the i16 argument comes next, if any
        #  - if we don't yet know the address for a label, just
        #    store the text and it'll get filled in later
        my $opcode = $instructions->{$match[0]}{opcode} << 8;
        my @operands;

        my ($instrop, $params_str) = split / /, $match[0], 2;
        my @params = split /\s*,\s*/, $params_str;

        for my $i (0 .. $#argpattern) {
            if ($params[$i] =~ /i8/) {
                $opcode |= arg2num($args[$i])&0xff;
            } elsif ($params[$i] =~ /i16/) {
                push @operands, arg2num($args[$i]);
            }
        }

        emit($opcode);
        emit($_) for @operands;
    }
}

# now turn the code into hex output
for my $c (@code) {
    if ($c =~ /\D/) {
        die "error: label $c not found\n" if !exists $label{$c};
        $c = $label{$c};
    }
    $c = $c+65536 if $c < 0;
    die "error: $c out of range\n" if $c < 0 || $c > 0xffff;
    print sprintf("%04x\n", $c);
}

# examples:
# x => die
# (x) => die
# (65535)++ => 65535
# 605 => 605
# (val) => val
sub arg2num {
    my ($arg) = @_;

    die "error: line $.: can't convert register to number: $arg\n" if $arg =~ /^(x|y|pc)$/;

    # remove (, ), +
    $arg =~ s/[\(\)\+]//g;

    return $arg;
}

# examples:
# x => x
# (x) => \(x\)
# (65535)++ => \((i8h|i16)\)\+\+
# 605 => i16
sub arg2pattern {
    my ($arg) = @_;

    # escape (, ), +
    $arg =~ s/([\(\)\+])/\\$1/g;

    my $subst = sub {
        my ($v) = @_;

        return $v if $v =~ /^(x|y|pc)$/;
        return '(i8h|i16)' if $v =~ /^\d+$/ && $v >= 0xff00 && $v <= 0xffff;
        return '(i8l|i16)' if $v =~ /^\d+$/ && $v >= 0x0000 && $v <= 0x00ff;
        return 'i16';
    };

    $arg =~ s/\b([a-z_0-9]+)\b/$subst->($1)/gei;

    return $arg;
}

sub namearg {
    my ($arg) = @_;
    die "error: line $.: invalid name: $arg\n" if $arg !~ /^[a-z_][a-z_0-9]*$/i;
    die "error: line $.: '$arg' is a reserved name\n" if $arg =~ /^(x|y)$/;
    return $arg;
}

sub numarg {
    my ($arg) = @_;
    my $val = $arg;
    my $neg = 1 if $val =~ s/^-//;
    $val = hex($1) if $val =~ /^0x([0-9a-f]+)$/i;
    die "error: line $.: invalid number: $arg\n" if $val !~ /^[0-9]+$/;
    return $neg ? -$val : $val;
}

sub params {
    my ($op, $n, @args) = @_;
    die "error: line $.: $op: expected $n arguments, found " . (scalar @args) . "\n" if @args != $n;
}

sub emit {
    my ($word) = @_;
    push @code, $word;
    $pc++;
}

sub load_instructions {
    my $file = $FindBin::Bin . "/instructions.json";
    open(my $fh, '<', $file)
        or die "can't read $file: $!";
    my $c = join('', <$fh>);
    close $fh;
    return decode_json($c);
}
