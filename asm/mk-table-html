#!/usr/bin/perl

use strict;
use warnings;

use FindBin;
use JSON qw(decode_json);

my $instructions_json;
my $instructions = load_instructions();
my %op2inst = map { $instructions->{$_}{opcode} => $_ } keys %$instructions;

print header();
print "<table>\n";
print "<tr><td></td>";
print "<th>_$_</th>" for (qw(0 1 2 3 4 5 6 7 8 9 a b c d e f));
print "</tr>\n";
for my $a (qw(0 1 2 3 4 5 6 7 8 9 a b c d e f)) {
    print "<tr><th>${a}_</th>";
    for my $b (qw(0 1 2 3 4 5 6 7 8 9 a b c d e f)) {
        my $opcode = "$a$b";
        my $inst = $op2inst{hex($opcode)}||'';
        my $i = $instructions->{$inst};

        $inst =~ s/\(i8h\)/r/g;

        my @clobbers = @{ $i->{clobbers}||[] };
        @clobbers = grep {!/x/} @clobbers if $inst =~ /^\S+ x\b/;
        @clobbers = grep {!/y/} @clobbers if $inst =~ /^\S+ y\b/;
        @clobbers = ('(none)') if !@clobbers;
        my $clobbers = join(',', map { "<span class=\"clob$_\">$_</span>" } sort @clobbers);
        my $clobber_warnings = '';
        $clobber_warnings .= '<span class="clobx">*</span>' if grep {/x/} @clobbers;
        $clobber_warnings .= '<span class="cloby">*</span>' if grep {/y/} @clobbers;

        my $microcode = join('<br>', map { "&nbsp;&nbsp;$_" } @{ $i->{ucode}||[] });

        my $remark = $i->{remark}||'';

        my ($instop, $instargs) = split / /, $inst, 2;
        $instop ||= '';
        $instargs ||= '';

        $i->{words} ||= '';
        $i->{cycles} ||= '';

        print "<td class=\"inst\"><div style=\"padding:2px\"><span style=\"font-weight:bold\">$instop</span> $instargs $clobber_warnings</div><div class=\"popup\"><b>Opcode:</b> $opcode<br><b>Words:</b> $i->{words}<br><b>Cycles:</b> $i->{cycles}<br><b>Clobbers:</b> $clobbers<b><br>Microcode:</b><br>$microcode<br>$remark</div></td>";
    }
    print "</tr>\n";
}
print "</table>\n";
print "<div class=\"clobx\">* clobbers x</div>\n";
print "<div class=\"cloby\">* clobbers y</div>\n";
print footer();

sub header {
    qq{<html>
<head>
<title>Instruction set</title>
<style type="text/css">
table {
    margin-right: 100px;
    font-size: 1.0em;
    font-family: monospace;
}
td {
    background-color: #ccc;
    color: black;
    padding: 2px;
}
td.inst:hover {
    background-color: #eee;
}
td.inst:hover div.popup {
    display: block;
}
td.inst div.popup {
    display:none;
}
div.popup {
    pointer-events: none;
    position: absolute;
    background: #eee;
    border: solid 1px black;
    width: 200px;
    padding: 2px;
}
th {
    background-color: #333;
    color: #ccc;
}
.clobx {
    color: #f00;
}
.cloby {
    color: #888;
}
tt {
    font-weight: bold;
    font-size: 1.2em;
}
</style>
</head>
<body>
<h1>Instruction set</h1>
<ul>
<li>The instruction word is the opcode shifted left by 8 bits, so opcode <tt>04</tt> becomes <tt>0400</tt>.</li>
<li><tt>x</tt> and <tt>y</tt> parameters refer to the registers.</li>
<li><tt>i8l</tt> and <tt>i8h</tt> parameters are stored in the lower 8 bits of the instruction word, so <tt>add x, 5</tt> becomes
<tt>0405</tt>. <tt>i8h</tt> is the same as <tt>i8l</tt> except it sets the upper 8 bits to 1, so <tt>add x, 0xff05</tt> becomes <tt>0505</tt>.</li>
<li><tt>r</tt> parameters are "pseudo-registers", which are any word in the top 256 words of memory, equivalent to <tt>(i8h)</tt>.
<tt>r0</tt> is the same as <tt>(0xff00)</tt>, <tt>r1</tt> is <tt>(0xff01)</tt>, and so on.
They can also be used via <tt>(i16)</tt> parameters.</li>
<li>Side effects on the <tt>x</tt> or <tt>y</tt> register are documented as "clobbers". You generally won't
mind <tt>y</tt> being clobbered.</li>
<li><tt>y</tt> is only exposed for the <tt>xor x, y</tt> instruction, because
<tt>xor x, r</tt> would take too many cycles.</li>
<li><tt>++</tt> and <tt>--</tt> refer to pre-/post- increment/decrement of a value or pointer.</li>
</ul>
};
}

sub footer {
    qq{</body>
</html>
};
}

sub load_instructions {
    my $file = $FindBin::Bin . "/instructions.json";
    open(my $fh, '<', $file)
        or die "can't read $file: $!";
    $instructions_json = join('', <$fh>);
    close $fh;
    return decode_json($instructions_json);
}
