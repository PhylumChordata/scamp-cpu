#!/usr/bin/perl

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/lib";

use File::Basename;
use SCAMP::FS;
use Try::Tiny;

$| = 1;

my $diskfile = shift or die "usage: fs DISK\n";

info("loading...");
my $fs = SCAMP::FS->new($diskfile);
info("\n");

my %cmd = (
    help => \&help,
    ll => \&ll,
    ls => \&ls,
    cd => \&cd,
    rm => \&rm,
    mkdir => \&mkdir,
    pwd => \&pwd,
    cat => \&cat,
    get => \&get,
    put => \&put,
    free => \&free,
    exit => \&done,
    abort => \&abort,
    kernel => \&kernel,
    limit => \&limit,
    view => \&view,
    grab => \&grab,
);

info("\$ ");

while (<>) {
    chomp;
    s/^\s*//g;
    s/\s*$//g;
    s/\s+/ /g;

    if ($_ ne '') {
        my @args = split / /;
        if ($cmd{$args[0]}) {
            try {
                $cmd{$args[0]}->(@args[1..$#args]);
            } catch {
                print "$args[0]: $_";
            };
        } else {
            print "don't know: $args[0]\n";
        }
    }

    info("\$ ");
}

info("exit\n");

done();

sub info {
    print STDERR @_ if -t STDIN;
}

sub help {
    print qq{commands:
    help      show this text
    ll        show directory contents, long listing
    ls        show directory contents
    cd DIR    change current directory
    rm NAME   remove the given file or directory
    mkdir DIR create a directory
    pwd       show current directory
    cat FILE  show contents of a file
    get FILE [HOSTFILE] get a file from the image into the host fs
    put [-t] HOSTFILE [FILE] put a file into the image from the host fs
    free      show number of free blocks
    exit      save the disk contents and quit
    abort     quit without saving contents
    kernel HEXFILE STARTADDR write HEXFILE to the disk, to be loaded at STARTADDR
    limit N   mark blocks numbered N and onwards as "used"
    grab DEVICE DIR  open the filesystem on DEVICE and copy over DIR

STARTADDR should be hex beginning "0x"

"-t" means the file should be converted between Unix text (1 byte per char)
and SCAMP text (2 bytes per char).
};
}

sub ll {
    my ($dir) = @_;

    $dir ||= '.';

    for my $name ($fs->ls($dir)) {
        my $type = $fs->nametype("$dir/$name") ? 'f' : 'd';
        my ($blks, $len) = $fs->namelen("$dir/$name");
        print "$type  $len  $blks  $name\n";
    }
}

sub ls {
    my ($dir) = @_;
    print "$_  " for $fs->ls($dir);
    print "\n";
}

sub cd {
    my ($dir) = @_;
    die "usage: cd DIR\n" if !$dir;
    $fs->chdir($dir);
}

sub rm {
    my ($name) = @_;
    die "usage: rm NAME\n" if !$name;
    $fs->unlink($name);
}

sub mkdir {
    my ($dir) = @_;
    die "usage: mkdir DIR\n" if !$dir;
    $fs->mkdir($dir);
}

sub pwd {
    print $fs->cwd, "\n";
}

sub cat {
    my ($file) = @_;
    print $fs->get($file);
}

sub get {
    # TODO: [nice] support -t
    my ($file, $hostfile) = @_;
    my $str = $fs->get($file);

    open(my $fh, '>', $hostfile)
        or die "can't write $hostfile: $!\n";
    print $fh $str;
    close $fh;
}

sub put {
    my $txt = 0;
    if ($_[0] eq '-t') {
        $txt = 1;
        shift @_;
    }

    my ($hostfile, $file) = @_;

    open(my $fh, '<', $hostfile)
        or die "can't read $hostfile: $!\n";
    my $str = join('',<$fh>);
    close $fh;

    if ($txt) {
        $str = join(chr(0), '', split(//, $str));
    };

    $file ||= basename($hostfile);
    $fs->put($file, $str);
}

sub kernel {
    my ($file, $start) = @_;
    die "usage: kernel HEXFILE STARTADDR\n" if !$file || !$start;
    die "expected hex start address beginning 0x" if $start !~ /^0x/;
    $start = hex($start);

    my @kernel;

    open(my $fh, '<', $file)
        or die "can't read $file: $!\n";
    while (<$fh>) {
        die "illegal hex file: $_\n" unless /^([0-9a-f]{2})([0-9a-f]{2})$/i;
        push @kernel, hex($1), hex($2);
    }
    close $fh;

    my $length = (@kernel/2)+1;

    my $checksum = (0x5343 + $start + $length)% 0x10000;
    my @block = (0x53, 0x43, int($start/256), $start%256, int($length/256), $length%256);
    my $blknum = 0;
    my $even = 1;
    while (defined (my $byte = shift @kernel)) {
        push @block, $byte;
        if ($even) {
            $checksum = ($checksum + $byte*256) % 0x10000;
        } else {
            $checksum = ($checksum + $byte) % 0x10000;
        }
        $even = !$even;
        if (@block == 512) {
            $fs->writeblock($blknum, @block);
            $blknum++;
            die "kernel is too big" if $blknum >= 64;
            @block = ();
        }
    }

    # TODO: may need to flush block in between these, if the kernel
    # length is unusual (but $fs->writeblock() will die if so)
    $checksum = 0x10000-$checksum;
    push @block, int($checksum/256);
    push @block, $checksum%256;

    if (@block) {
        push @block, 0 while @block < 512;
        $fs->writeblock($blknum, @block);
    }
}

sub limit {
    my ($N) = @_;
    die "usage: limit $N\n" if !$N;

    for my $i ($N .. 65535) {
        $fs->setblkused($i);
    }
}

sub view {
    my ($name) = @_;

    my $blk = $fs->find($name);
    $fs->dirwalk($blk, sub {
        my ($name, $blknum, $dirblknum, $off) = @_;
        print " [in $dirblknum] $name => $blknum\n";
    });
}

sub grab {
    my ($device, $dir) = @_;

    my $fs2 = SCAMP::FS->new($device,
        ignore_size => 1,
    );

    _grab($fs2, $dir);
}

sub _grab {
    my ($fs2, $dir) = @_;

    for my $name ($fs2->ls($dir)) {
        next if $name =~ /^\.\.?$/;
        my $type = $fs2->nametype("$dir/$name") ? 'f' : 'd';
        if ($fs2->nametype("$dir/$name")) {
            # file
            $fs->put("$dir/$name", $fs2->get("$dir/$name"));
        } else {
            # directory
            $fs->mkdir("$dir/$name");
            _grab($fs2, "$dir/$name");
        }
    }
}

sub free {
    my ($nfree, $ntotal) = $fs->free;

    print "$nfree blocks free out of $ntotal total\n";
}

sub done {
    info("saving...");
    $fs->save;
    info("\n");
    exit(0);
}

sub abort {
    info("quit without saving!\n");
    exit(0);
}
