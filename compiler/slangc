#!/usr/bin/perl

# SLANG Compiler by jes
#
# Reads SLANG source from stdin, produces SCAMP assembly code on stdout. In the
# event of a compile error, there'll be a message on stderr and a non-zero exit
# status, and the code on stdout should be ignored.
#
# Recursive descent parser based on https://www.youtube.com/watch?v=Ytq0GQdnChg
# Each Foo() parses a rule from the grammar; if the rule matches it returns 1,
# else it returns 0.
#
# Rather than turning the source code into an abstract syntax tree and then
# turning the AST into code, we treat the compiler's call graph as an implicit
# AST and generate code as we "walk the call graph", i.e. as the compiler parses
# the source.
#
# TODO: optionally annotate generated assembly code with the source code that
#       generated it
# TODO: provide unsigned magnitude comparison?
# TODO: fix &/| precedence
# TODO: array indexing syntax

use strict;
use warnings;

my $s = join('',<>);
my @s = split //, $s;
my $filename = 'stdin';
my $pos = 0;
my $line = 1;
my $col = 1;
my $labelnum = 0;
my $scope = {
    global => 1,
    symbols => {},
    parent => undef,
};
my %STRINGS;
my @ARRAYS;
my %INCLUDED;
my $globalscope = $scope;
my $IDENTIFIER;
my $BLOCKLEVEL = 0;
my $BREAKLABEL;
my $CONTLABEL;

parse(\&Program);

my $end = label();
# jump over the globals and strings
print "jmp $end\n";

# allocate space for globals
for my $global (sort keys %{ $scope->{symbols} }) {
    print "_$global: .word 0\n" if !$scope->{symbols}{$global}{extern};
}

# store string constants
my $labelcmp = sub {
    my ($a,$b) = @_;
    $a =~ s/^l__//;
    $b =~ s/^l__//;
    return $a <=> $b;
};
for my $s (sort {$labelcmp->($STRINGS{$a},$STRINGS{$b})} keys %STRINGS) {
    print "$STRINGS{$s}:\n";
    print ".word $_\n" for map { ord($_) } split //, $s;
    print ".word 0\n";
}
for my $arr (@ARRAYS) {
    print "$arr->{label}:\n";
    print ".gap $arr->{length}\n";
    print ".word 0\n";
}
print "$end:\n";

# parse() is a wrapper around the parser functions:
# call $f->(@args) and return whether it matched; if it did not match, then
# restore $pos,$line,$col
sub parse {
    my ($f, @args) = @_;
    my $pos0 = $pos;
    my $line0 = $line;
    my $col0 = $col;

    local $SIG{__DIE__} = sub {
        my ($err) = @_;
        die "error: $filename: line $line: col $col: $err";
    };
    return 1 if $f->(@args);

    $pos = $pos0;
    $line = $line0;
    $col = $col0;
    return 0;
}

sub Program {
    skip();
    parse(\&Statements);

    die "garbage after end of program\n" if $pos != @s;
    die "expected to be left in global scope after program (probably a compiler bug)\n" if !$scope->{global};
    die "expected to be left at block level 0 (probably a compiler bug)\n" if $BLOCKLEVEL != 0;

    return 1;
}

sub Statements {
    while (1) {
        return 1 if !parse(\&Statement);
        return 1 if !parse(\&CharSkip,';');
    }
}

sub Statement {
    return 1 if parse(\&Include) || parse(\&Block) || parse(\&Extern) || parse(\&Declaration) || parse(\&Conditional) || parse(\&Loop) || parse(\&Break) || parse(\&Continue) || parse(\&Return) || parse(\&Assignment);
    if (parse(\&Expression)) {
        print "# discard expression value\n";
        print "pop x\n";
        return 1;
    }
    return 0;
}

sub Include {
    return 0 if !parse(\&Keyword,'include');
    return 0 if !parse(\&Char,'"');
    my $file = StringLiteralText();

    return 1 if $INCLUDED{$file};
    $INCLUDED{$file} = 1;

    my @was = ($s,$filename,$pos,$line,$col);

    open(my $fh, '<', $file)
        or die "can't read $file: $!\n";
    $s = join('', <$fh>);
    close $fh;

    @s = split //, $s;

    $filename = $file;
    $pos = 0;
    $line = 1;
    $col = 1;

    die "expected statements\n" if !parse(\&Program);

    ($s,$filename,$pos,$line,$col) = @was;
    @s = split //, $s;

    return 1;
}

sub Block {
    return 0 if !parse(\&CharSkip,'{');
    parse(\&Statements);
    die "block needs closing brace\n" if !parse(\&CharSkip,'}');
    return 1;
}

sub Extern {
    return 0 if !parse(\&Keyword,'extern');

    die "extern needs identifier\n" if !parse(\&Identifier);
    my $id = $IDENTIFIER;

    die "can only use extern in global scope\n" if !$scope->{global};
    die "duplicate declaration at global scope: $id\n" if $scope->{symbols}{$id};
    $scope->{symbols}{$id} = {
        type => 'global',
        extern => 1,
    };
    return 1;
}

sub Declaration {
    return 0 if !parse(\&Keyword,'var');
    die "var not allowed here\n" if $BLOCKLEVEL != 0;
    die "var needs identifier\n" if !parse(\&Identifier);
    my $id = $IDENTIFIER;
    die "duplicate declaration in scope: $id\n" if $scope->{symbols}{$id};

    warn "local var overrides global: $id\n" if $globalscope->{symbols}{$id};

    # add name to scope
    $scope->{symbols}{$id} = {
        type => $scope->{global} ? 'global' : 'local',
        bp_rel => $scope->{bp_rel}--,
    };
    if (!$scope->{global}) {
        print "# allocate space for $id\n";
        print "dec sp\n";
    }
    return 1 if !parse(\&CharSkip,'=');

    # now an expression to initialise the variable
    die "initialisation needs expression\n" if !parse(\&Expression);
    poptovar($id);
    return 1;
}

sub Conditional {
    return 0 if !parse(\&Keyword,"if");
    $BLOCKLEVEL++;

    die "if condition needs open paren\n" if !parse(\&CharSkip,"(");
    print "# if condition\n";
    die "if condition needs expression\n" if !parse(\&Expression);

    # if top of stack is 0, jmp $falselabel
    my $falselabel = label();
    print "pop x\n";
    print "test x\n";
    print "jz $falselabel\n";

    die "if condition needs close paren\n" if !parse(\&CharSkip,")");
    print "# if body\n";
    die "if needs body\n" if !parse(\&Statement);

    if (parse(\&Keyword,"else")) {
        my $endiflabel = label();
        print "jmp $endiflabel\n";
        print "# else body\n";
        print "$falselabel:\n";
        die "else needs body\n" if !parse(\&Statement);
        print "$endiflabel:\n";
    } else {
        print "$falselabel:\n";
    }

    $BLOCKLEVEL--;
    return 1;
}

sub Loop {
    return 0 if !parse(\&Keyword,'while');
    $BLOCKLEVEL++;

    die "while condition needs open paren\n" if !parse(\&CharSkip,'(');

    my $oldbreaklabel = $BREAKLABEL;
    my $oldcontlabel = $CONTLABEL;
    my $loop = label();
    my $endloop = label();

    $BREAKLABEL = $endloop;
    $CONTLABEL = $loop;

    print "# while loop\n";
    print "$loop:\n";
    die "while condition needs expression\n" if !parse(\&Expression);

    # if top of stack is 0, jmp $endloop
    print "pop x\n";
    print "test x\n";
    print "jz $endloop\n";

    die "while condition needs close paren\n" if !parse(\&CharSkip,')');

    parse(\&Statement); # optional

    print "jmp $loop\n";
    print "$endloop:\n";

    $BREAKLABEL = $oldbreaklabel;
    $CONTLABEL = $oldcontlabel;

    $BLOCKLEVEL--;
    return 1;
}

sub Break {
    return 0 if !parse(\&Keyword,"break");
    die "can't break here\n" if !$BREAKLABEL;
    print "# break\n";
    print "jmp $BREAKLABEL\n";
    return 1;
}

sub Continue {
    return 0 if !parse(\&Keyword,"continue");
    die "can't continue here\n" if !$CONTLABEL;
    print "# continue\n";
    print "jmp $CONTLABEL\n";
    return 1;
}

sub Return {
    return 0 if !parse(\&Keyword,"return");

    die "return needs expression\n" if !parse(\&Expression);

    # we currently have the return value on the stack, we want to pop it to r0
    print "# return\n";
    print "pop x\n";
    print "ld r0, x\n";
    funcreturn();
    return 1;
}

sub Assignment {
    my $id;
    if (parse(\&Identifier)) {
        $id = $IDENTIFIER;
    } else {
        return 0 if !parse(\&CharSkip,'*');
        die "can't dereference non-expression\n" if !parse(\&Term);
    }

    return 0 if !parse(\&CharSkip,'=');
    die "assignment needs rvalue\n" if !parse(\&Expression);

    if ($id) {
        poptovar($id);
    } else {
        print "# store to pointer:\n";
        print "pop x\n";
        print "ld r0, x\n";
        print "pop x\n";
        print "ld (x), r0\n";
    }
    return 1;
}

sub Expression { return parse(\&ExpressionLevel,0); }

# while loop: pop 2 args off stack and apply expression
sub ExpressionLevel {
    my ($level) = @_;
    my @operators = (
        ['&','|','^'], # XXX: these should be precedence between == and +, but parsing forbids it for now due to collision with &&
        ['&&','||'],
        ['==','!=','>=','<=','>','<'],
        ['+','-'],
        #['*','/','%'], # XXX: these will turn into function calls, if supported at all
    );

    return parse(\&Term) if $level == @operators;

    my $apply_op;
    while (1) {
        my $match = parse(\&ExpressionLevel,$level+1);
        if ($apply_op) {
            die "operator $apply_op needs a second operand\n" if !$match;
            genop($apply_op);
        } else {
            return 0 if !$match;
        }

        $apply_op = undef;
        for my $op (@{ $operators[$level] }) {
            if (parse(\&String,$op)) {
                $apply_op = $op;
                last;
            }
        }
        return 1 if !$apply_op;
        skip();
    }
}

sub Term {
    return 0 if !parse(\&AnyTerm);
    while (1) { # index into array
        last if !parse(\&CharSkip,'[');
        die "array index needs expression\n" if !parse(\&Expression);
        die "array index needs close bracket\n" if !parse(\&CharSkip,']');

        # stack now has array and index on it: pop, add together, dereference, push
        print "pop x\n";
        print "ld r0, x\n";
        print "pop x\n";
        print "add x, r0\n";
        print "ld x, (x)\n";
        print "push x\n";
    }
    return 1;
}

sub AnyTerm {
    return 1 if parse(\&Constant) || parse(\&ArrayLiteral) || parse(\&FunctionCall) || parse(\&AddressOf) || parse(\&PreOp) || parse(\&PostOp) || parse(\&UnaryExpression) || parse(\&ParenExpression);
    return 0 if !parse(\&Identifier);
    pushvar($IDENTIFIER);
    return 1;
}

sub Constant { return parse(\&NumericLiteral) || parse(\&StringLiteral) || parse(\&FunctionDeclaration) || parse(\&InlineAsm); }
sub NumericLiteral { return parse(\&HexLiteral) || parse(\&CharacterLiteral) || parse(\&DecimalLiteral); }

sub HexLiteral {
    return 0 if !parse(\&String,"0x");
    my $pos0 = $pos;
    die "illegal hex literal\n" if !matchChar(qr/[0-9a-fA-F]/);
    while (matchChar(qr/[0-9a-fA-F]/)) { }

    my $val = substr($s, $pos0, $pos-$pos0);
    genliteral(hex($val));
    skip();
    return 1;
}

sub DecimalLiteral {
    my $pos0 = $pos;
    matchChar(qr/[-+]/);
    return 0 if !matchChar(qr/\d/);
    while (matchChar(qr/\d/)) {}

    my $val = substr($s, $pos0, $pos-$pos0);
    genliteral($val);
    skip();
    return 1;
}

sub CharacterLiteral {
    return 0 if !parse(\&Char,"'");
    my $c = nextchar();
    if ($c eq '\\') {
        genliteral(ord(escapedchar(nextchar())));
    } else {
        genliteral(ord($c));
    }
    
    return 1 if parse(\&CharSkip,"'");
    die "illegal character literal\n";
}

sub escapedchar {
    my ($c) = @_;
    my %map = (n => "\n", r => "\r", t => "\r", 0 => "\0", "]" => "\]");
    return $map{$c}||$c;
}

sub StringLiteral {
    return 0 if !parse(\&Char,'"');
    my $string = StringLiteralText();
    my $label;
    if (exists $STRINGS{$string}) {
        $label = $STRINGS{$string};
    } else {
        $label = label();
    }
    print "ld x, $label\n";
    print "push x\n";
    $STRINGS{$string} = $label;
    return 1;
}

# expects you to have already parsed the opening quote; consumes the closing quote
sub StringLiteralText {
    my $string = '';
    while ($pos < @s) {
        return $string if parse(\&CharSkip,'"');
        if (parse(\&Char,'\\')) {
            $string .= escapedchar(nextchar());
        } else {
            $string .= nextchar();
        }
    }
    die "unterminated string literal\n";
}

sub ArrayLiteral {
    return 0 if !parse(\&CharSkip,'[');

    my $label = label();
    my $length = 0;

    while (1) {
        last if !parse(\&Expression);

        # TODO: this loads to a constant address, we should make the assembler
        # allow us to calculate it at assembly like like:
        #   ld ($label+$length), x
        print "ld r0, $label\n";
        print "add r0, $length\n";
        print "pop x\n";
        print "ld (r0), x\n";

        $length++;
        last if !parse(\&CharSkip,',');
    }

    die "array literal needs close bracket\n" if !parse(\&CharSkip,']');

    print "ld x, $label\n";
    print "push x\n";

    push @ARRAYS, {
        label => $label,
        length => $length,
    };
    return 1;
}

sub FunctionDeclaration {
    return 0 if !parse(\&Keyword,'func');
    die "func needs open paren" if !parse(\&CharSkip,'(');

    my @params = Parameters();
    my $functionlabel = label();
    my $functionend = label();
    print "\n# parseFunctionDeclaration:\n";
    print "jmp $functionend\n";
    print "$functionlabel:\n";

    # back up the enclosing scope, because we hack functions into the global scope
    # to make life easy
    my $parentscope = $scope;
    newscope();
    $scope->{parent} = $globalscope;

    my $bp_rel = 2;
    for my $p (reverse @params) {
        die "duplicate parameter name: $p\n" if $scope->{symbols}{$p};
        $scope->{symbols}{$p} = {
            type => 'local',
            bp_rel => $bp_rel++, # parameters are above the base pointer, locals are below the base pointer
        };
        $scope->{params}++;
    }

    die "func needs close paren\n" if !parse(\&CharSkip,')');
    parse(\&Statement);
    funcreturn();

    # endscope()-ish
    $scope = $parentscope;

    print "# end function declaration\n\n";
    print "$functionend:\n";
    print "ld x, $functionlabel\n";
    print "push x\n";
    return 1;
}

sub InlineAsm {
    return 0 if !parse(\&Keyword,'asm');
    return 0 if !parse(\&CharSkip,'{');

    my $end = label();
    my $asm = label();

    print "jmp $end\n";
    print "$asm:\n";

    print "#peepopt:off\n";
    while ($pos < @s) {
        last if parse(\&Char,'}');
        print nextchar();
    }
    print "\n";
    print "#peepopt:on\n";

    print "$end:\n";
    print "ld x, $asm\n";
    print "push x\n";

    return 1;
}

sub Parameters {
    my @params;
    while (1) {
        return @params if !parse(\&Identifier);
        push @params, $IDENTIFIER;
        return @params if !parse(\&CharSkip,',');
    }
}

sub FunctionCall {
    return 0 if !(parse(\&Identifier) && parse(\&CharSkip,'('));
    my $id = $IDENTIFIER;

    print "# parseFunctionCall:\n";
    # backup return address before we push arguments
    print "ld x, r254\n";
    print "push x\n";

    die "argument list needs closing paren\n" if !(parse(\&Arguments) && parse(\&CharSkip, ')'));

    # call function
    pushvar($id);
    print "pop x\n";
    print "call x\n";

    # restore return address
    print "pop x\n";
    print "ld r254, x\n";

    # push return value
    print "ld x, r0\n";
    print "push x\n";
    return 1;
}

sub Arguments {
    while (1) {
        return 1 if !parse(\&Expression);
        return 1 if !parse(\&CharSkip,',');
    }
}

sub PreOp {
    my $op;
    if (parse(\&String,"++")) {
        $op = 'inc';
    } elsif (parse(\&String,"--")) {
        $op = 'dec';
    } else {
        return 0;
    }
    skip();
    return 0 if !parse(\&Identifier); # TODO: accept any l-value
    skip();
    print "# pre-$op\n";
    pushvar($IDENTIFIER);
    print "pop x\n";
    print "$op x\n";
    print "push x\n"; # for poptovar
    poptovar($IDENTIFIER);
    print "push x\n"; # for the expression that the pre-op appeared in
    return 1;
}

sub PostOp {
    return 0 if !parse(\&Identifier); # TODO: accept any l-value
    skip();
    my $id = $IDENTIFIER;
    my $op;
    if (parse(\&String,"++")) {
        $op = 'inc';
    } elsif (parse(\&String,"--")) {
        $op = 'dec';
    } else {
        return 0;
    }
    skip();
    print "# post-$op\n";
    pushvar($IDENTIFIER);
    print "pop x\n";
    print "push x\n"; # for the expression that the post-op appeared in
    print "$op x\n";
    print "push x\n"; # for poptovar
    poptovar($IDENTIFIER);
    return 1;
}

sub AddressOf {
    return 0 if !parse(\&CharSkip,'&');
    die "address-of (&) needs identifier\n" if !parse(\&Identifier);
    my $id = $IDENTIFIER;

    my $sym = symlookup($id);
    if ($sym->{type} eq 'global') {
        print "# &$id (global)\n";
        print "ld x, _$id\n";
        print "push x\n";
    } else {
        print "# &$id (local)\n";
        print "ld x, r253\n";
        print "add x, ". (($sym->{bp_rel}+0x10000)%0x10000) . "\n";
        print "push x\n";
    }
    return 1;
}

sub UnaryExpression {
    my $op = $s[$pos];
    return 0 if !matchChar(qr/[!~*+-]/);
    skip();
    die "unary operator $op needs operand\n" if !parse(\&Term);

    my %mnemonic = (
        '~' => 'not',
        '-' => 'neg',
    );

    print "# unary $op\n";
    print "pop x\n";
    if ($mnemonic{$op}) {
        # pop arg from stack, negate it, put it back on stack
        print "$mnemonic{$op} x\n";
    } elsif ($op eq '!') {
        # test arg from stack, if it's zero do nothing, otherwise overwrite it with a 1
        my $endlabel = label();
        print "test x\n";
        print "ld x, 0\n"; # doesn't clobber flags
        print "jnz $endlabel\n"; # if the popped value is not 0, then we want 0
        print "ld x, 1\n"; # if the popped value was 0, then we want 1
        print "$endlabel:\n";
    } elsif ($op eq '+') {
        # unary + is a no-op
    } elsif ($op eq '*') {
        # pop arg from stack, dereference it, put it back on stack
        print "# pointer dereference:\n";
        print "ld x, (x)\n";
    } else {
        die "unrecognised unary operator $op (probably a compiler bug)\n";
    }
    print "push x\n";
    return 1;
}

sub ParenExpression {
    return 0 if !parse(\&CharSkip,'(');
    return 1 if parse(\&Expression) && parse(\&CharSkip,')');
    return 0;
}

sub Identifier {
    my $pos0 = $pos;
    return 0 if !matchChar(qr/[a-zA-Z_]/);
    while (matchChar(qr/[a-zA-Z0-9_]/)) {};
    $IDENTIFIER = substr($s, $pos0, $pos-$pos0),
    skip();
    return 1;
}

### tokeniser-ish functions

# parse string followed by word boundary
sub Keyword {
    my ($s) = @_;
    return 0 if !parse(\&String,$s);
    if ($pos == @s || $s[$pos] !~ /^([a-zA-Z0-9_])$/) {
        skip();
        return 1;
    }
    return 0;
}

sub String {
    my ($s) = @_;
    for my $c (split //, $s) {
        return 0 if !parse(\&Char,$c);
    }
    return 1;
}

sub Char {
    my ($c) = @_;
    return matchChar(qr/\Q$c\E/);
}

# parse a char, and skip() if it matched
sub CharSkip {
    my ($c) = @_;
    return 0 if !matchChar(qr/\Q$c\E/);
    skip();
    return 1;
}

# skip over whitespace and comments
sub skip {
    while (1) {
        if (parse(\&Char,'#')) {
            while (matchChar(qr/[^\n]/)) { } # skip everything until \n
        } elsif (!matchChar(qr/[ \t\r\n]/)) {
            return 1;
        }
    }
}

sub matchChar {
    my ($re) = @_;
    return 0 if $pos >= @s;
    return 0 if $s[$pos] !~ /$re/;
    nextchar();
    return 1;
}

sub nextchar {
    my $ch = $s[$pos];
    if ($s[$pos] eq "\n") {
        $line++;
        $col = 0;
    }
    $pos++;
    $col++;
    return $ch;
}

### scopes

sub newscope {
    # save old base pointer, and put new base pointer in r253
    print "# newscope:\n";
    print "ld x, r253\n";
    print "push x\n";
    print "ld r253, sp\n";

    $scope = {
        symbols => {},
        parent => $scope,
        bp_rel => 0,
        params => 0,
    };
}

sub endscope {
    runtime_endscope();
    die "can't exit global scope (probably a compiler bug)\n" if $scope->{global};
    $scope = $scope->{parent};
}

sub runtime_endscope {
    # restore old sp and bp
    print "# endscope:\n";
    print "ld sp, r253\n";
    print "pop x\n";
    print "ld r253, x\n";
}

sub symlookup {
    my ($name) = @_;
    my $s = $scope;
    while ($s) {
        return $s->{symbols}{$name} if $s->{symbols}{$name};
        $s = $s->{parent};
    }
}

### code generation utilities

sub poptovar {
    my ($name) = @_;
    my $sym = symlookup($name);
    die "unrecognised identifier: $name\n" if !$sym;
    if ($sym->{type} eq 'global') {
        print "# poptovar: global $name\n";
        print "pop x\n";
        print "ld (_$name), x\n";
    } else {
        print "# poptovar: local $name\n";
        print "ld r252, r253\n";
        print "add r252, " . (($sym->{bp_rel}+0x10000)%0x10000) . "\n";
        print "pop x\n";
        print "ld (r252), x\n";
    }
}

sub pushvar {
    my ($name) = @_;
    my $sym = symlookup($name);
    die "unrecognised identifier: $name\n" if !$sym;
    if ($sym->{type} eq 'global') {
        print "# pushvar: global $name\n";
        print "ld x, (_$name)\n";
        print "push x\n";
    } else {
        print "# pushvar: local $name\n";
        print "ld x, r253\n";
        print "ld x, " . (($sym->{bp_rel}+0x10000)%0x10000) . "(x)\n";
        print "push x\n";
    }
}

sub funcreturn {
    # cleanup the local scope
    my $s = $scope;
    runtime_endscope();

    # then clean up the function parameters and return
    print "# function had $s->{params} parameters:\n";
    print "ret $s->{params}\n";
}

sub genliteral {
    my ($val) = @_;
    $val += 0x10000 if $val < 0; # make everything positive
    die "numeric literal out of range: $val\n" if $val < 0 || $val > 0xffff;

    print "# genliteral:\n";
    if ($val <= 0x00ff || $val >= 0xff00) {
        print "push $val\n";
    } else {
        print "ld x, $val\n";
        print "push x\n";
    }
}

sub label {
    $labelnum++;
    return "l__$labelnum";
}

# pop 2 elements off the stack, apply $op, and push the result
sub genop {
    my ($op) = @_;
    my %mnemonic = (
        '+' => 'add',
        '-' => 'sub',
        '&' => 'and',
        '|' => 'or',
    );

    print "# operator: $op\n";
    print "pop x\n";
    print "ld r0, x\n";
    print "pop x\n";

    if ($mnemonic{$op}) {
        print "$mnemonic{$op} x, r0\n";
    } elsif ($op eq '^') {
        print "ld y, r0\n"; # TODO: refactor to load this to y in the first place instead of going via r0
        print "xor x, y\n";
    } elsif ($op eq '!=') {
        my $end = label();
        print "sub x, r0 #peepopt:test\n";
        print "jz $end\n";
        print "ld x, 1\n";
        print "$end:\n";
    } elsif ($op eq '==') {
        my $end = label();
        print "sub x, r0 #peepopt:test\n";
        print "ld x, 0\n"; # doesn't clobber flags
        print "jnz $end\n";
        print "ld x, 1\n";
        print "$end:\n";
    } elsif ($op =~ /^(>=|<=|>|<)$/) {
        my $xr0 = ($op =~ /^(>=|<)$/) ? "x, r0" : "r0, x";
        my $match = $op =~ /=/ ? 0 : 1;
        my $nomatch = $match ? 0 : 1;
        my $wantlt = ($op =~ />/) ? 0 : 1;
        my $wantgt = $wantlt ? 0 : 1;
        # subtract 2nd argument from first, if result is less than zero, then 2nd argument is bigger than first
        my $lt = label();
        my $docmp = label();
        print "ld r1, r0\n";
        print "ld r2, x\n";
        print "ld r3, x\n";
        print "and r1, 32768 #peepopt:test\n"; # r1 = r0 & 0x8000
        print "and r2, 32768 #peepopt:test\n"; # r2 = x & 0x8000
        print "sub r1, r2 #peepopt:test\n";
        print "ld x, r3\n"; # doesn't clobber flags
        print "jz $docmp\n"; # only directly compare x and r0 if they're both negative or both positive

        # just compare signs
        print "test r2\n";
        print "ld x, $wantlt\n"; # doesn't clobber flags
        print "jnz $lt\n";
        print "ld x, $wantgt\n";
        print "jmp $lt\n";

        # do the actual magnitude comparison
        print "$docmp:\n";
        print "sub $xr0 #peepopt:test\n";
        print "ld x, $match\n"; # doesn't clobber flags
        print "jlt $lt\n";
        print "ld x, $nomatch\n";
        print "$lt:\n";
    } elsif ($op eq '&&') {
        my $false = label();
        print "test x\n";
        print "ld x, 0\n"; # doesn't clobber flags
        print "jz $false\n";
        print "test r0\n";
        print "jz $false\n";
        print "ld x, 1\n"; # both args true: x=1
        print "$false:\n";
    } elsif ($op eq '||') {
        my $true = label();
        print "test x\n";
        print "ld x, 1\n"; # doesn't clobber flags
        print "jnz $true\n";
        print "test r0\n";
        print "jnz $true\n";
        print "ld x, 0\n"; # both args false: x=0
        print "$true:\n";
    } else {
        die "unrecognised binary operator $op (probably a compiler bug)\n";
    }

    print "push x\n";
}
