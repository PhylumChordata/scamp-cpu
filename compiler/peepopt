#!/usr/bin/perl

# Peephole optimiser for slangc
#
# TODO: apply all push/pop optimisation in a single pass of peepopt (currently
#       there is more it can do in a 2nd pass)

use strict;
use warnings;

my $l1level = 0;
my @l2;
my $l2ldx;
my $l3ldx;
my $l4reg;
my $l4constant;
my $l4state = 0;
my $l6ldx;
my $l7ldxr0;
my $l8remove;
my $l9ldxx = 0;
my $l12state = 0;
my $l12load;
my $l13ldx;
my $l14count = 0;
my $l15state = 0;
my $l15val;
my $l15offset;

my $off = 0;

while (<>) {
    chomp;

    if ($_ =~ /^#/) {
        print "$_\n";
        next;
    }
    next if $_ eq '';

    if (/peepopt:off/) {
        level1('');
        $off=1;
    }
    if (/peepopt:on/) {
        $off = 0;
    }

    if ($off) {
        print "$_\n";
    } else {
        level1($_);
    }
}

level1('');

# collapse "push x; pop x", and turn "ret 0" into "ret" and turn "ld x, 0(x)" into "ld x, (x)"
sub level1 {
    my ($line) = @_;

    if ($line eq 'push x') {
        $l1level++;
    } elsif ($line eq 'pop x' && $l1level > 0) {
        $l1level--;
    } elsif ($line eq 'ret 0') {
        level2("ret");
    } elsif ($line eq 'ld x, 0(x)') {
        level2("ld x, (x)");
    } else {
        level2("push x") for 1..$l1level;
        level2($line);
        $l1level = 0;
    }
}

# turn "push CONSTANT; pop x" into "ld x, CONSTANT"
sub level2 {
    my ($line) = @_;

    if ($line =~ /^push (\d+)$/) {
        push @l2, $1;
    } elsif ($line eq 'pop x' && @l2) {
        $l2ldx = pop @l2;
    } elsif ($line =~ /call|x|sp|r255|push|pop|jmp|jlt|jgt|jle|jge|jz|jnz|:/) { # XXX: writes to (0xffff) won't trigger this
        if (defined $l2ldx) {
            level3("ld x, $l2ldx");
            $l2ldx = undef;
        }
        while (defined (my $v = shift @l2)) {
            level3("push $v");
        }
        level3("$line");
    } else {
        level3("$line");
    }
}

# turn "ld x, CONSTANT; ld REG, x" into "ld REG, CONSTANT"
# turn "ld x, CONSTANT; ld (REG), x" into "ld (REG), CONSTANT"
sub level3 {
    my ($line) = @_;

    if ($line =~ /^ld x, (\d+)$/) {
        $l3ldx = $1;
    } elsif (defined $l3ldx && $line =~ /^ld r(\d+), x$/) {
        level4("ld r$1, $l3ldx");
        $l3ldx = undef;
    } elsif (defined $l3ldx && $line =~ /^ld \(r(\d+)\), x$/) {
        level4("ld \(r$1\), $l3ldx");
        $l3ldx = undef;
    } else {
        level4("ld x, $l3ldx") if defined $l3ldx;
        $l3ldx = undef;
        level4("$line");
    }
}

# turn "ld REG, CONSTANT; pop x; (add|sub|and|or) x, REG" into "pop x; (add|sub|and|or) x, CONSTANT"
# XXX: potentially dubious because we leave the REG contents undefined, but I think
# it's fine for the type of code that slangc generates in practice
sub level4 {
    my ($line) = @_;

    if ($l4state == 0 && $line =~ /^ld r(\d+), (\d+)$/) {
        $l4reg = $1;
        $l4constant = $2;
        $l4state = 1;
    } elsif ($l4state == 1 && $line eq 'pop x') {
        $l4state = 2;
    } elsif ($l4state == 2 && $line =~ /^(add|sub|and|or) x, r$l4reg( #peepopt:test)?$/) {
        my $comment = $2||'';
        level5("pop x");
        level5("$1 x, $l4constant$comment");
        $l4state = 0;
    } else {
        level5("ld r$l4reg, $l4constant") if $l4state >= 1;
        level5("pop x") if $l4state >= 2;
        level5("$line");
        $l4state = 0;
    }
}

# collapse "add foo, 0", "sub foo, 0", "or foo, 0", "and foo, 65535"
# turn "add/sub foo, 1" into "inc/dec foo"
sub level5 {
    my ($line) = @_;

    if ($line =~ /^(add|sub|or) (x|sp|r\d+), 0$/ || $line =~ /^and (x|sp|r\d+), 65535$/) {
        # collapse to no-op (but note we don't set flags the same way we would have done)
    } elsif ($line =~ /^(add|sub|or) (x|sp|r\d+), 0 #peepopt:test$/ || $line =~ /^(and) (x|sp|r\d+), 65535 #peepopt:test$/) {
        level6("test $2");
    } elsif ($line =~ /^add (x|sp|r\d+), 1$/ || $line =~ /^sub (x|sp|r\d+), 65535$/) {
        level6("inc $1");
    } elsif ($line =~ /^sub (x|sp|r\d+), 1$/ || $line =~ /^add (x|sp|r\d+), 65535$/) {
        level6("dec $1");
    } else {
        level6("$line");
    }
}

# turn "ld x, (_foo); call x" into "call (_foo)"
sub level6 {
    my ($line) = @_;

    if ($line =~ /^ld x, (\([a-zA-Z0-9_]+\))$/ && !defined $l6ldx) {
        $l6ldx = $1;
    } elsif ($line eq 'call x' && defined $l6ldx) {
        level7("call $l6ldx");
        $l6ldx = undef;
    } else {
        level7("ld x, $l6ldx") if defined $l6ldx;
        $l6ldx = undef;
        level7("$line");
    }
}

# collapse "ld x, r0; ld r0, x"; this occurs when a function returns the
# return value of another function, e.g.
#   var f = func(x) { return g(x); };
sub level7 {
    my ($line) = @_;

    if ($line eq 'ld x, r0') {
        $l7ldxr0 = 1;
    } elsif ($line eq 'ld r0, x' && $l7ldxr0) {
        # no-op
        $l7ldxr0 = 0;
    } else {
        level8("ld x, r0") if $l7ldxr0;
        $l7ldxr0 = 0;
        level8("$line");
    }
}

# dead code removal: remove everything between "ret" or "jmp" and the next label
sub level8 {
    my ($line) = @_;

    $l8remove = 0 if $line =~ /:/;
    level9("$line") if !$l8remove;
    $l8remove = 1 if $line =~ /^(ret|jmp)/;
}

# turn "ld x, (x); ld REG, x" into "ld REG, (x)"
sub level9 {
    my ($line) = @_;

    if (!$l9ldxx && $line eq "ld x, (x)") {
        $l9ldxx = 1;
    } elsif ($l9ldxx && $line =~ /^ld r(\d+), x$/) {
        level12("ld r$1, (x)");
        $l9ldxx = 0;
    } else {
        level12("ld x, (x)") if $l9ldxx;
        $l9ldxx = 0;
        level12("$line");
    }
}

# XXX: level10,level11 deleted

# turn "push x; ld r, i16; pop x" into just "ld r, i16"
sub level12 {
    my ($line) = @_;

    if ($l12state == 0 && $line =~ /^push x$/) {
        $l12state++;
    } elsif ($l12state == 1 && $line =~ /^ld r\d+, (0x)?[0-9a-f]+$/i) {
        $l12state++;
        $l12load = $line;
    } elsif ($l12state == 2 && $line =~ /^pop x$/) {
        level13("$l12load");
        $l12state = 0;
    } else {
        level13("push x") if $l12state >= 1;
        level13("$l12load") if $l12state >= 2;
        $l12state = 0;
        level13($line);
    };
}

# turn "ld x, a; ld x, b; ld x, ...; ld x, c" into "ld x, c"
sub level13 {
    my ($line) = @_;

    if ($line =~ /^ld x, (.*)$/ && $line ne "ld x, (x)") {
        $l13ldx = $1;
    } else {
        level14("ld x, $l13ldx") if defined $l13ldx;
        level14($line);
        $l13ldx = undef;
    }
}

# turn "dec sp; dec sp; ..." into "sub sp, N"
sub level14 {
    my ($line) = @_;

    if ($line =~ /^dec sp$/) {
        $l14count++;
    } else {
        level15("sub sp, $l14count") if $l14count > 1;
        level15("dec sp") if $l14count == 1;
        $l14count = 0;
        level15("$line");
    }
}

# turn:
#   push N; ld r252, sp; add r252, M; pop x; ld (r252), x
# into:
#   ld r252, sp; add r252, M-1; ld (r252), N
sub level15 {
    my ($line) = @_;

    if ($l15state == 0 && $line =~ /^push (\d+)$/) {
        $l15val = $1;
        $l15state++;
    } elsif ($l15state == 1 && $line eq 'ld r252, sp') {
        $l15state++;
    } elsif ($l15state == 2 && $line =~ /^add r252, (\d+)$/) {
        $l15offset = $1-1; # "minus 1" because we're getting rid of the push that preceded it
        $l15state++;
    } elsif ($l15state == 3 && $line eq 'pop x') {
        $l15state++;
    } elsif ($l15state == 4 && $line eq 'ld (r252), x') {
        if ($l15offset == 0) { # XXX: can we ever hit this case?
            print "ld (sp), $l15val\n";
        } else {
            print "ld r252, sp\n";
            print "add r252, $l15offset\n";
            print "ld (r252), $l15val\n";
        }
        $l15state = 0;
    } else {
        print "push $l15val\n" if $l15state >= 1;
        print "ld r252, sp\n" if $l15state >= 2;
        print "add r252, $l15offset\n", if $l15state >= 3;
        print "pop x\n" if $l15state >= 4;
        $l15state = 0;
        print "$line\n";
    }
}
